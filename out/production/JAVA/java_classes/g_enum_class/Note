ENUM Class:

- It has a collection of CONSTANTS (variables which values can not be changed)
- Its CONSTANTS are static and final implicitly (we do not have to write it).
- It can not extend any class, as it internally extends java.lang.Enum class
- It can implement interfaces.
- It can have variables, constructor, methods.
- It can not be initiated (as its constructor will be private only, even you give default, in bytecode it make it private)
- No other class can extend Enum class
- It can have abstract method, and all the constant should implement that abstract method.


Normal Enum Class
Enum with custom values
Method override by constant
Enum with abstract method
Enum implement interface

------------------------------------------------------------------------------------------------------------------------

What is the benefit of ENUM class when we can create constant through "static" and "final" keyword ?

While static final constants are useful for defining fixed values, enum provides several advantages that go beyond simple constants:
Type Safety: Enums provide type safety. You can define a method to accept only specific enum values, preventing invalid inputs. With static final constants, you don't get this level of control.
Namespace Grouping: Enums group related constants together under a single type, making the code more readable and organized.
Built-in Methods: Enums come with helpful built-in methods like values(), valueOf(), and ordinal(). These are not available with static final constants.
Rich Behavior: Enums can have fields, constructors, and methods. This allows you to associate behavior with each constant value, which is not possible with static final.
Switch Statement Support: Enums integrate well with switch statements, offering cleaner syntax and better maintainability.
Singleton Guarantee: Enum values are implicitly final, static, and singleton. You can be sure there's only one instance per enum value, and they're inherently serializable.
